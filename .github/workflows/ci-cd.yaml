name: Performance Test
# Arquivo de configuração do GitHub Actions para executar testes de performance

# Ações que irão disparar o workflow
on:
  pull_request:
    # Ignorar branches específicas
    branches-ignore:
      - 'mona/octocat'
    # Disparar workflow somente se arquivos dentro deste caminho forem modificados
    paths:
      - './gitops/docker/php/'

  push:
    # Disparar workflow em pushes nas branches especificadas
    branches:
      - main
      - 'releases/**'
    # Ignorar modificações em caminhos específicos
    paths-ignore:
      - 'docs/**'  
      # Exceção para subdiretórios dentro de docs
      - '!sub-project/docs/**'
    # Tags que disparam o workflow
    tags:
      - v2
      - v1.*

  issues:
    # Disparar workflow em determinados tipos de eventos de issues
    types: [opened, edited]

  label:
    # Disparar workflow ao criar um label
    types:
      - created

  schedule:
    # Agendar execução do workflow com base em cron (diariamente às 5:30 e 17:30 UTC)
    - cron: '30 5,17 * * *'

  workflow_call:
    # Definir entradas para execução deste workflow a partir de outro
    inputs:
      username:
        description: 'Nome de usuário passado pelo workflow que chama'
        default: 'john-doe'
        required: false
        type: string

env:
  # Configurações de ambiente
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs: 

  manual_test_pipe:
    runs-on: ubuntu-latest

    steps:
      - name: Print the input name to STDOUT
        run: echo The username is ${{ inputs.username }}

  schedule_test_pipe:
    runs-on: ubuntu-latest
    steps:
      - name: Not on Monday or Wednesday
        if: github.event.schedule != '30 5 * * 1,3'
        run: echo "This job runs every day at 5:30 UTC except Monday and Wednesday."
      - name: Every time
        run: echo "This step will always run"

  unit_tests_api:
    runs-on: ubuntu-latest
    needs: [manual_test_pipe, schedule_test_pipe]
    strategy:
      matrix:
        node-version: [20.x, 22.x, 23.x] 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Node.js dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  lint_tests_api:
    runs-on: ubuntu-latest
    needs: [manual_test_pipe, schedule_test_pipe]
    strategy:
      matrix:
        node-version: [20.x, 22.x, 23.x] 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Node.js dependencies
        run: yarn install

      - name: Run tests
        run: yarn lint        

  security_test_api_code:
    runs-on: ubuntu-latest
    needs: [lint_tests_api,unit_tests_api]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: nodejsscan scan
        id: njsscan
        uses: ajinabraham/njsscan-action@master
        with:
          args: '. --sarif --output results.sarif || true'

      - name: Upload njsscan report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif 

  security_test_api_container:
    runs-on: ubuntu-latest
    needs: [lint_tests_api,unit_tests_api]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build images 
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ github.sha }} .
   
      - name: Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ github.sha }}'
          #scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true 

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        # if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  tag_test_repo_api: 
    runs-on: ubuntu-latest
    needs: [lint_tests_api,unit_tests_api]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'        
      - name: Minor version for each merge
        id: taggerDryRun
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          WITH_V: 'true'
          DRY_RUN: 'true'

      - name: echo new tag
        run: |
          echo "The next tag version will be: ${{ steps.taggerDryRun.outputs.new_tag }}"
      - name: echo tag
        run: |
          echo "The current tag is: ${{ steps.taggerDryRun.outputs.tag }}"
      - name: echo part
        run: |
          echo "The version increment was: ${{ steps.taggerDryRun.outputs.part }}"     

      - name: Minor version for each merge
        id: taggerFinal
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          WITH_V: 'true' 

  container_build_push_api:
    name: container_build_push_api
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write    
    needs: [security_test_api_container,security_test_api_code,tag_test_repo_api]
    outputs:
      tag: ${{ steps.metasha.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker meta latest
        id: metalatest
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker meta sha
        id: metasha
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          tags: |
            type=sha,prefix=v-{{sha}},format=short

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image main sha
        uses: docker/build-push-action@v6
        id: docker_build_sha
        with:
          context: .
          file: Dockerfile 
          platforms: linux/amd64,linux/arm64
          push: true
          labels: ${{ steps.metasha.outputs.labels }}
          tags: |
            ${{ steps.metasha.outputs.tags }}

      - name: Build and push image main latest
        uses: docker/build-push-action@v6
        id: docker_build_latest
        with:
          context: .
          file: Dockerfile 
          push: true
          labels: ${{ steps.metalatest.outputs.labels }}
          tags: |
            ${{ steps.metalatest.outputs.tags }}           

      - name: Package git generated tags
        id: package
        run: echo "::set-output name=tags::${{ steps.metalatest.outputs.tags }}"    

      - name: Push package to GitHub Container Registry
        run: docker push ${{ steps.metalatest.outputs.tags }}

      - name: Generate artifact attestation sha
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.docker_build_sha.outputs.digest }}
          push-to-registry: true

      - name: Generate artifact attestation latest
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.docker_build_latest.outputs.digest }}
          push-to-registry: true          